# Template for IBM DataPower instant deployment
---
apiVersion: v1
kind: Template
metadata:
  name: datapower-ephemeral
  annotations:
    openshift.io/display-name: "IBM DataPower"
    description: |
      IBM DataPower application - without persistent storage.
      Web UI login  admin/admin
    iconClass: icon-load-balancer
    tags: datapower,instant-app
parameters:
  - name: DATAPOWER_SERVICE_NAME
    displayName: DataPower service name
    description: The name of the OpenShift Service exposed for DataPower
    required: true
    value: datapower
  - name: DATAPOWER_IMAGE_VERSION
    description: Version of IBM DataPower image from DockerHub
    displayName: DataPower image version
    value: 7.5.2
    required: true
  - name: DATAPOWER_WS_NAME
    displayName: Host name for the exposed web service route
    description: The exposed hostname that will route to the DataPower web service, if left blank a value will be defaulted.

objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      icon-class: load-balancer
      openshift.io/display-name: IBM DataPower application
      tags: datapower,instant-app
    labels:
      name: ${DATAPOWER_SERVICE_NAME}
    name: ${DATAPOWER_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATAPOWER_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/container.datapower.image.entrypoint: '["/bin/drouter"]'
        creationTimestamp: null
        labels:
          name: ${DATAPOWER_SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: DATAPOWER_ACCEPT_LICENSE
            value: "true"
          - name: DATAPOWER_WORKER_THREADS
            value: "4"
          image: ibmcom/datapower:${DATAPOWER_IMAGE_VERSION}
          name: datapower
          ports:
          - containerPort: 9090
            protocol: TCP
          - containerPort: 8000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9090
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /drouter/config
            name: datapower-config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: datapower-config
          secret:
            secretName: ${DATAPOWER_SERVICE_NAME}-config
    test: false
    triggers:
    - type: ConfigChange
  status: {}

- apiVersion: v1
  kind: Route
  metadata:
    annotations:
    labels:
      name: ${DATAPOWER_SERVICE_NAME}
    name: ${DATAPOWER_SERVICE_NAME}-ui
  spec:
    port:
      targetPort: 9090-tcp-ui
    to:
      kind: Service
      name: ${DATAPOWER_SERVICE_NAME}
      weight: 100
    tls:
      termination: passthrough
  status:

- apiVersion: v1
  kind: Route
  metadata:
    annotations:
    labels:
      name: ${DATAPOWER_SERVICE_NAME}
    name: ${DATAPOWER_SERVICE_NAME}-ws
  spec:
    host: ${DATAPOWER_WS_NAME}
    port:
      targetPort: 8000-tcp-ws
    to:
      kind: Service
      name: ${DATAPOWER_SERVICE_NAME}
      weight: 100
  status:

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      name:  ${DATAPOWER_SERVICE_NAME}
    name:  ${DATAPOWER_SERVICE_NAME}
  spec:
    ports:
    - name: 9090-tcp-ui
      port: 9090
      protocol: TCP
      targetPort: 9090
    - name: 8000-tcp-ws
      port: 8000
      protocol: TCP
      targetPort: 8000

    selector:
      name: ${DATAPOWER_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP

- apiVersion: v1
  kind: Secret
  metadata:
    name: ${DATAPOWER_SERVICE_NAME}-config
    labels:
      name: ${DATAPOWER_SERVICE_NAME}
  type: Opaque
  data:
    auto-startup.cfg: 